{"version":3,"file":"static/js/227.1516178d.chunk.js","mappings":"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","sources":["utils/common.js","static/image/icon.svg","webpack://water_blog_water/./src/components/SyntaxHighlight/index.module.scss?9740","components/SyntaxHighlight/index.jsx","views/javaScriptBasic/This.jsx","views/javaScriptBasic/ThisBind.jsx","views/javaScriptBasic/index.jsx"],"sourcesContent":["import { message } from \"antd\";\n// 复制文本\nexport const copyCode = function (text) {\n  const input = document.createElement(\"input\");\n  document.body.appendChild(input);\n  input.setAttribute(\"value\", text);\n  input.select();\n  if (document.execCommand(\"copy\")) {\n    document.execCommand(\"copy\");\n  }\n  message.success(\"复制成功\");\n  document.body.removeChild(input);\n};\n// 查找path\nexport const findItem = (items, key) => {};\n","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgIcon(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 54,\n    height: 14,\n    viewBox: \"0 0 54 14\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    fillRule: \"evenodd\",\n    transform: \"translate(1 1)\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 6,\n    cy: 6,\n    r: 6,\n    fill: \"#FF5F56\",\n    stroke: \"#E0443E\",\n    strokeWidth: 0.5\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 26,\n    cy: 6,\n    r: 6,\n    fill: \"#FFBD2E\",\n    stroke: \"#DEA123\",\n    strokeWidth: 0.5\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 46,\n    cy: 6,\n    r: 6,\n    fill: \"#27C93F\",\n    stroke: \"#1AAB29\",\n    strokeWidth: 0.5\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcon);\nexport default __webpack_public_path__ + \"static/media/icon.9c9d0e6ebba93045472dadbad7861c58.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"codes\":\"SyntaxHighlight_codes__kPycZ\",\"mask_js\":\"SyntaxHighlight_mask_js__bRF9V\",\"code\":\"SyntaxHighlight_code__9n4ZU\",\"iconStyle\":\"SyntaxHighlight_iconStyle__3Q5uj\"};","import React, { useRef, useState } from \"react\";\n// 语法高亮\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\n// 主题\nimport { xonokai } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { Tooltip, message, Modal } from \"antd\";\nimport { FullscreenOutlined, OrderedListOutlined, CopyrightOutlined, PlayCircleOutlined, FullscreenExitOutlined } from \"@ant-design/icons\";\nimport { copyCode } from \"../../utils/common\";\nimport icon from \"../../static/image/icon.svg\";\nimport styles from \"./index.module.scss\";\nimport { useTransition } from \"transition-hook\";\nimport devtools from \"devtools-detect\";\nconst eval2 = (fn) => {\n  var Fun = Function; // 一个变量指向Function，防止有些前端编译工具报错\n  return new Fun(\"return \" + fn)();\n};\nexport default function SyntaxHighlight(props) {\n  let [lineNumber, setLineNumber] = useState(true);\n  let [onOff, setOnOff] = useState(false);\n  let { stage, shouldMount } = useTransition(onOff, 300);\n  const fullscreen = () => {\n    setOnOff(!onOff); // 全屏切换\n  };\n  const runCode = () => {\n    if (!devtools.isOpen) {\n      Modal.success({\n        content: \"运行成功，请打开控制台查看运行结果\",\n      });\n    }\n    console.clear();\n    if (props.codeMode) {\n      props.codeMode.forEach((el) => {\n        console.log(\n          `%c${el.title}`,\n          \"background:-webkit-linear-gradient(315deg,#42d392 25%,#647eff);font-size:14px;border-radius: 4px;padding:4px\",\n          eval2(el.content)\n        );\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div className={styles.codes}>\n        <div style={{ padding: \"15px 15px 0 15px\", display: \"flex\", justifyContent: \"space-between\" }}>\n          <img src={icon} alt=\"\" />\n          <div>\n            <Tooltip placement=\"bottom\" title={lineNumber ? \"隐藏行号\" : \"显示行号\"}>\n              <OrderedListOutlined\n                onClick={() => {\n                  setLineNumber(!lineNumber);\n                }}\n                className={styles.iconStyle}\n              />\n            </Tooltip>\n            <Tooltip placement=\"bottom\" title={\"全屏\"}>\n              <FullscreenOutlined onClick={fullscreen} className={styles.iconStyle} />\n            </Tooltip>\n            <Tooltip placement=\"bottom\" title={\"复制代码\"}>\n              <CopyrightOutlined onClick={() => copyCode(props.children)} className={styles.iconStyle} />\n            </Tooltip>\n            <Tooltip placement=\"bottom\" title={\"运行\"}>\n              <PlayCircleOutlined onClick={runCode} className={styles.iconStyle} />\n            </Tooltip>\n          </div>\n        </div>\n        <SyntaxHighlighter\n          customStyle={{ border: \"none\" }}\n          language=\"javascript\" //你需要的类型，比如url、JavaScript等\n          style={xonokai} //这个就是你代码高亮的样式，颜色类的\n          showLineNumbers={lineNumber} //这个是显示不显示左侧的行数\n          lineNumberStyle={{ color: \"#fff\", fontSize: 14 }} //这个是行数的样式\n          wrapLines={false} //确定每行代码是否应该包装在父元素中\n        >\n          {props.children}\n        </SyntaxHighlighter>\n      </div>\n      {shouldMount && (\n        <div\n          className={styles.mask_js}\n          style={{\n            transition: \".3s\",\n            transform: {\n              from: \"scale(0)\",\n              enter: \"scale(1)\",\n              leave: \"scale(0)\",\n            }[stage],\n            opacity: stage === \"enter\" ? 1 : 0,\n          }}\n        >\n          <div className={styles.code}>\n            <div style={{ padding: \"15px 15px 0 15px\", display: \"flex\", justifyContent: \"space-between\" }}>\n              <img src={icon} alt=\"\" />\n              <div>\n                <Tooltip placement=\"bottom\" title={lineNumber ? \"隐藏行号\" : \"显示行号\"}>\n                  <OrderedListOutlined\n                    onClick={() => {\n                      setLineNumber(!lineNumber);\n                    }}\n                    className={styles.iconStyle}\n                  />\n                </Tooltip>\n                <Tooltip placement=\"bottom\" title={\"取消全屏\"}>\n                  <FullscreenExitOutlined onClick={fullscreen} className={styles.iconStyle} />\n                </Tooltip>\n                <Tooltip placement=\"bottom\" title={\"复制代码\"}>\n                  <CopyrightOutlined onClick={() => copyCode(props.children)} className={styles.iconStyle} />\n                </Tooltip>\n                <Tooltip placement=\"bottom\" title={\"运行\"}>\n                  <PlayCircleOutlined onClick={runCode} className={styles.iconStyle} />\n                </Tooltip>\n              </div>\n            </div>\n            <SyntaxHighlighter\n              customStyle={{ border: \"none\" }}\n              language=\"javascript\" //你需要的类型，比如url、JavaScript等\n              style={xonokai} //这个就是你代码高亮的样式，颜色类的\n              showLineNumbers={lineNumber} //这个是显示不显示左侧的行数\n              lineNumberStyle={{ color: \"#fff\", fontSize: 14 }} //这个是行数的样式\n              wrapLines={false} //确定每行代码是否应该包装在父元素中\n            >\n              {props.children}\n            </SyntaxHighlighter>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport SyntaxHighlight from \"../../components/SyntaxHighlight\";\nimport { Divider } from \"antd\";\n\nexport default function This() {\n  return (\n    <div>\n      {/* this 指向 */}\n      <h2 id=\"This\">一、This指向</h2>\n      <Divider style={{ margin: \"15px 0\" }} />\n      <div className=\"g_list\">\n        {\" \"}\n        <p>\n          1. 在js中， <span className=\"g_code\">this</span> 的意思是为「这个 / 当前」，{\" \"}\n          <span className=\"g_main\">是一个指针型变量，它动态指向当前函数的运行环境</span>;\n        </p>\n        <p>\n          2. 在不同的场景调用同一个函数，<span className=\"g_code\">this</span>{\" \"}\n          的指向也可能发生变化，但他永远指向其所在函数的真实调用者；如果没有调用者，就指向 <span className=\"g_code\">window</span>;\n        </p>\n        <p>\n          3. 普通函数中的 <span className=\"g_code\">this</span> 谁调用就指向谁，没有调用者就指向全局的 <span className=\"g_code\">window</span>;\n        </p>\n        <p>\n          4. 箭头函数中的 <span className=\"g_code\">this</span> 指向于函数 <span className=\"g_main\">作用域</span> 所处的对象;\n        </p>\n      </div>\n      <Divider style={{ margin: \"15px 0\" }} />\n      {/* this 全局函数 */}\n      <div className=\"c_title\">\n        <h2 id=\"GlobalFunction\">1、全局函数</h2>\n        <div className=\"g_list\">\n          <p>\n            1. 在 <span className=\"g_error\">全局作用域</span> 下，<span className=\"g_code\">this</span> 始终指向全局对象{\" \"}\n            <span className=\"g_code\">window</span>， <span className=\"g_error\">无论是否严格模式！</span>;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"1.全局函数 Line 3\",\n                content: \"window\",\n              },\n              {\n                title: \"1.全局函数 Line 4\",\n                content: \"window\",\n              },\n            ]}\n          >{`\n'use strict'\nconsole.log(this); // window\nwindow.console.log(this); // window下的console方法\n            `}</SyntaxHighlight>\n          <p>\n            2. 在 <span className=\"g_error\">函数作用域</span> 下，<span className=\"g_code\">this</span> 分为 <span className=\"g_error\">二种</span>{\" \"}\n            情况，严格模式和非严格模式；\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"2.全局函数 Line 7\",\n                content: \"undefined\",\n              },\n              {\n                title: \"2.全局函数 Line 8\",\n                content: \"window\",\n              },\n              {\n                title: \"2.全局函数 Line 17\",\n                content: \"window\",\n              },\n              {\n                title: \"2.全局函数 Line 18\",\n                content: \"window\",\n              },\n            ]}\n          >{`\n// 严格模式下\nfunction test(){\n  'use strict'\n  console.log(this); \n}\ntest(); // undefined\nwindow.test(); // window\n\n// 直接test()调用函数,this指向undefined，window.test()调用函数this指向window。\n// 因此，在严格模式下， 我们对代码的的调用必须严格的写出被调用的函数的对象，不可以有省略或者说简写。\n\n// 非严格模式下\nfunction test(){\n  console.log(this); \n}\ntest(); // window\nwindow.test(); // window\n            `}</SyntaxHighlight>\n        </div>\n      </div>\n\n      {/* this 对象函数 */}\n      <Divider style={{ margin: \"15px 0\" }} />\n      <div className=\"c_title\">\n        <h2 id=\"ObjectMethod\">2、对象方法</h2>\n        <div className=\"g_list\">\n          <p>\n            1. 对象内部方法的 <span className=\"g_code\">this</span> 指向调用这些方法的对象，也就是谁调用就指向谁;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"1. 对象方法 Line 8\",\n                content: \"String('water')\",\n              },\n            ]}\n          >{`\nlet obj = {\n  name:'water',\n  objFn:function () {\n    console.log(this.name) \n  }\n}\nobj.objFn() // water\n            `}</SyntaxHighlight>\n          <p>\n            2. 对象内部方法的如果赋值给全局的声明的函数，则 <span className=\"g_code\">this</span> 会指向 <span className=\"g_main\">全局声明的变量</span>{\" \"}\n            ;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"2. 对象方法 Line 18\",\n                content: \"String('Global water')\",\n              },\n              {\n                title: \"2. 对象方法 Line 20\",\n                content: \"String('water')\",\n              },\n              {\n                title: \"2. 对象方法 Line 21\",\n                content: \"String('water2')\",\n              },\n            ]}\n          >{`\nvar name = 'Global water';\nlet obj = {\n  name:'water',\n  objFn:function () {\n    console.log(this.name)\n  },\n  obj2:{\n    name:'water2',\n    objFn2:function () {\n      console.log(this.name)\n    },\n  }\n}\nlet funs = obj.objFn;\n// 复制完后的 funs this指向window，\n// var声明的变量会挂载在window上，而let和const声明的变量不会挂载到window上，它形成了一个块作用域，则会输出undefined。\nfuns() // 如果全局的name声明用的let,则输出undefined\n// 内部方法的this指向离被调用函数最近的对象 \nobj.objFn() // water\nobj.obj2.objFn2() // water2\n            `}</SyntaxHighlight>\n        </div>\n      </div>\n      {/* this 构造函数 */}\n      <Divider style={{ margin: \"15px 0\" }} />\n      <div className=\"c_title\">\n        <h2 id=\"Constructor\">3、构造函数</h2>\n        <div className=\"g_list\">\n          <p>\n            1. 构造函数中的 <span className=\"g_code\">this</span> 指向 <span className=\"g_code\">new</span> <span className=\"g_main\">关键字</span>{\" \"}\n            创建出的实例;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"1. 构造函数 Line 10\",\n                content: \"String('water')\",\n              },\n              {\n                title: \"1. 构造函数 Line 11\",\n                content: \"Number(18)\",\n              },\n              {\n                title: \"1. 构造函数 Line 12\",\n                content: \"String('boy')\",\n              },\n            ]}\n          >{`\n// 【补充】构造函数的函数名首字母大写，便于区别普通函数\nfunction Person ( name, age, sex) {\nthis.name = name;\nthis.age = age;\nthis.sex = sex;\n}\n// 【补充】构造函数必须中实例必须用new声明\nlet p = new Person('water',18,'boy')\nconsole.log(p.name); // water\nconsole.log(p.age); // 18\nconsole.log(p.sex) // boy\n            `}</SyntaxHighlight>\n        </div>\n      </div>\n      {/* 定时器、回调函数 */}\n      <Divider style={{ margin: \"15px 0\" }} />\n      <div className=\"c_title\">\n        <h2 id=\"SetTimeout\">4、定时器、回调函数</h2>\n        <div className=\"g_list\">\n          <p>\n            1. 如果没有特殊指向， <span className=\"g_code\">setInterval</span> 和 <span className=\"g_code\">setTimeout</span> 的回调函数中{\" \"}\n            <span className=\"g_code\">this</span> 的指向都是 <span className=\"g_code\">window</span> 。\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"1. 定时器、回调函数 Line 3\",\n                content: \"window\",\n              },\n              {\n                title: \"1. 定时器、回调函数 Line 17\",\n                content: \"String('my name is window')\",\n              },\n            ]}\n          >{`\nsetTimeout(function () {\n    console.log(this); // window\n}, 0)\n\nlet name = \"my name is window\"; \nlet obj = {\n    name: \"my name is obj\",\n    funs: function () {\n        let timer = null;\n        clearInterval(timer);\n        timer = setInterval(function () {\n            console.log(this.name);\n        }, 100);\n    },\n};\nobj.funs(); // my name is window\n            `}</SyntaxHighlight>\n          <p>\n            2. 这是因为JS的定时器方法是定义在 <span className=\"g_code\">window</span> 下的。但是平时很多场景下，都需要修改{\" \"}\n            <span className=\"g_code\">this</span> 的指向;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"2. 定时器、回调函数 Line 14\",\n                content: \"String('my name is obj')\",\n              },\n            ]}\n          >{`\nlet name = \"my name is window\"; \nlet obj = {\n    name: \"my name is obj\",\n    funs: function () {\n        let that = this; // 修改this的指向\n        let timer = null;\n        clearInterval(timer);\n        timer = setInterval(function () {\n            console.log(that.name); // 对象内this的指向\n        }, 100);\n    },\n};\nobj.funs(); // my name is obj\n            `}</SyntaxHighlight>\n          <p>\n            3. <span className=\"g_error\">回调函数</span>中的， <span className=\"g_code\">this</span> 指向;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"3. 定时器、回调函数 Line 16\",\n                content: \"String('water is undefined years')\",\n              },\n            ]}\n          >{`\n// 回调函数\nlet obj = {\n    age: 18,\n    say: function () {\n        function callback() {\n            return this.age;\n        }\n        func(callback);\n    },\n};\nfunction func(callback) {\n  let name = \"water\";\n    console.log(name, \" is\", callback() + \" years\"); \n}\nobj.say(); // water is undefined years\n/**\n * 【解析】：\n * 函数内部的【this】指向于此函数的调用者（拥有者）\n * 但在上面这个例子中，为什么会输出undefined\n * 虽然【callback】定义在对象【o】的【say】方法中，但实际上由于【callback】是在【func】函数中被普通调用的\n * 那么【func】中的【callback】的调用对象我们可以理解为【window】对象\n * 当使用一个对象未定义的属性时不会报错，会返回undefined，而直接使用一个未定义的变量便会报错\n*/\n            `}</SyntaxHighlight>\n        </div>\n      </div>\n      {/* 事件函数 */}\n      <Divider style={{ margin: \"15px 0\" }} />\n      <div className=\"c_title\">\n        <h2 id=\"EventFunction\">5、事件函数</h2>\n        <div className=\"g_list\">\n          <p>\n            1. 元素绑定事件，事件触发后执行函数， <span className=\"g_code\">this</span> 指向的是 <span className=\"g_main\">当前元素</span> ;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"1. 事件函数 Line 7\",\n                content: \"String('btn 这个dom 对象')\",\n              },\n            ]}\n          >{`\n<button id=\"btn\">click me</button>\n\nwindow.onload = function () {\n    var btn = document.getElementById(\"btn\");\n    btn.onclick = function () {\n        console.log(this); //  btn \n    };\n};\n            `}</SyntaxHighlight>\n        </div>\n      </div>\n      {/* 箭头函数 */}\n      <Divider style={{ margin: \"15px 0\" }} />\n      <div className=\"c_title\">\n        <h2 id=\"ArrowFunction\">6、箭头函数</h2>\n        <div className=\"g_list\">\n          <p>\n            1. <span className=\"g_code\">this</span> 指向箭头函数定义时 <span className=\"g_error\">所处的对象</span> ;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"1. 箭头函数 Line 11\",\n                content: \"String('my name is obj')\",\n              },\n            ]}\n          >{`\nlet name = \"my name is window\";\nlet obj = {\n    name: \"my name is obj\",\n    func: function () {\n        return (() => {\n            console.log(this.name);\n        })();\n    },\n};\nobj.func()  // my name is obj\n            `}</SyntaxHighlight>\n        </div>\n      </div>\n      {/* call、apply、bind 中的this  */}\n      <Divider style={{ margin: \"15px 0\" }} />\n      <div className=\"c_title\">\n        <h2 id=\"CallApplyBind\">7、call、apply、bind 中的This</h2>\n        <div className=\"g_list\">\n          <p>\n            1. <span className=\"g_code\">call（a, b, c）</span> 方法接收 <span className=\"g_error\">三个</span> 参数，第一个是{\" \"}\n            <span className=\"g_code\">this</span> 指向，\n            <span className=\"g_main\">第二个，三个是传递给函数的实参</span> ，可以是数字、字符串、数组等类型的数据类型都可以。\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"1. call、apply、bind Line 7\",\n                content: \"window\",\n              },\n              {\n                title: \"1. call、apply、bind Line 9\",\n                content: `[\n                    Object({\n                    fn:function fn(n1, n2){\n                        console.log(this);\n                        console.log(n1, n2);\n                    }\n                }),undefined,undefined]`,\n              },\n              {\n                title: \"1. call、apply、bind Line 10\",\n                content: \"[1,2,undefined]\",\n              },\n              {\n                title: \"1. call、apply、bind Line 11\",\n                content: `[ Object({\n                    fn:function fn(n1, n2){\n                        console.log(this);\n                        console.log(n1, n2);\n                    }\n                }),1,2]`,\n              },\n              {\n                title: \"1. call、apply、bind Line 13\",\n                content: \"window\",\n              },\n              {\n                title: \"1. call、apply、bind Line 14\",\n                content: \"window\",\n              },\n              {\n                title: \"1. call、apply、bind Line 17\",\n                content: \"undefined\",\n              },\n              {\n                title: \"1. call、apply、bind Line 18\",\n                content: \"null\",\n              },\n            ]}\n          >{`\nfunction fn(n1,n2){\n    console.log(this);  \n    console.log(n1,n2)\n}\n//调用call()方法\nfn.call(); // window\nlet obj = {fn:fn}; \nfn.call(obj);// this => obj; n1 、n2 => undefined\nfn.call(1,2);// this => 1; n1 => 2, n2 => undefined;\nfn.call(obj,1,2);// this => obj; n1 => 1,n2 => 2;\n//非严格模式下\nfn.call(undefined);//this => window\nfn.call(null);//this => window\n//严格模式下\n\"use strict\"\nfn.call(undefined);//this => undefined\nfn.call(null);//this => null\n            `}</SyntaxHighlight>\n          <p>\n            2. <span className=\"g_code\">apply(a, [b])</span> 和 <span className=\"g_code\">call()</span> 基本一致，{\" \"}\n            <span className=\"g_error\">唯一区别在于传参方式</span>， <span className=\"g_code\">apply</span> 把需要传递给{\" \"}\n            <span className=\"g_code\">fn()</span> 的参数放到一个数组（或者类数组）中传递进去，虽然写的是一个数组，但是也相当于给{\" \"}\n            <span className=\"g_code\">fn()</span> 一个个的传递。\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"2. call、apply、bind Line 10\",\n                content: `[Object({\n                  age:18,\n                  fn:function fn(){\n                      console.log(this);\n                      console.log(n1, n2);\n                      console.log(arguments);\n                  }\n              }), String('1, 2'),String('Arguments(2)[1, 2]')]`,\n              },\n              {\n                title: \"2. call、apply、bind Line 11\",\n                content: `String('Uncaught TypeError: CreateListFromArrayLike called on non-object')`,\n              },\n              {\n                title: \"2. call、apply、bind Line 12\",\n                content: `[Object({\n                  age:18,\n                  fn:function fn(){\n                      console.log(this);\n                      console.log(n1, n2);\n                      console.log(arguments);\n                  }\n              }), String('11, apply'),String('Arguments(3)[11, \"apply\", { a: 123 }]')]`,\n              },\n            ]}\n          >{`\n// apply方法的使用和call方法基本相同，唯一的区别是，apply方法传参要求是数组类型的，数组内可以任意形式的数据\nfunction fn(n1, n2) {\nconsole.log(this);\nconsole.log(n1, n2);\nconsole.log(arguments);\n}\nlet obj = { fn: fn, age: 20 };\n//调用apply()方法\nfn.apply(obj, [1, 2]);\nfn.apply(obj, 1, 2); // 报错\nfn.apply(obj, [11, \"apply\", { a: 123 }]); // 注意第二个参数必须是数组，否则会报错\n            `}</SyntaxHighlight>\n          <p>\n            3. <span className=\"g_code\">bind（a, b, c）</span>，语法和 <span className=\"g_code\">call()</span> 一模一样，区别在于立即执行还是等待执行，{\" \"}\n            <span className=\"g_code\">bind</span> 不兼容IE6~8。\n          </p>\n          <p>\n            --- <span className=\"g_code\">bind</span> 与 <span className=\"g_code\">call()</span> 的唯一区别就是 <span className=\"g_code\">call()</span>{\" \"}\n            直接改变函数 <span className=\"g_code\">test()</span> 的指向，而 <span className=\"g_code\">bind()</span> 是生成了一个新函数{\" \"}\n            <span className=\"g_code\">test()</span> ，该函数改变了指向;\n          </p>\n          <SyntaxHighlight\n            codeMode={[\n              {\n                title: \"3. call、apply、bind Line 8\",\n                content: `[Object({\n                    age:18,\n                    fn:function fn(n1, n2){\n                        console.log(this);\n                        console.log(n1, n2);\n                        console.log(arguments);\n                    }\n                }), String('1, 2')]`,\n              },\n              {\n                title: \"3. call、apply、bind Line 10\",\n                content: `String('改变fn中的this，fn并不执行')`,\n              },\n              {\n                title: \"3. call、apply、bind Line 13\",\n                content: `[Object({\n                    age:18,\n                    fn:function fn(n1, n2){\n                        console.log(this);\n                        console.log(n1, n2);\n                        console.log(arguments);\n                    }\n                }), String('11, 22')]`,\n              },\n              {\n                title: \"3. call、apply、bind Line 15\",\n                content: `String('改变fn中的this，fn并不执行')`,\n              },\n              {\n                title: \"3. call、apply、bind Line 16\",\n                content: `String('改变fn中的this，fn并不执行')`,\n              },\n              {\n                title: \"3. call、apply、bind Line 17\",\n                content: `[Object({\n                    age:18,\n                    fn:function fn(n1, n2){\n                        console.log(this);\n                        console.log(n1, n2);\n                        console.log(arguments);\n                    }\n                }), String('77, 88')]`,\n              },\n              {\n                title: \"3. call、apply、bind Line 21\",\n                content: `[Object({\n                    age:18,\n                    fn:function fn(n1, n2){\n                        console.log(this);\n                        console.log(n1, n2);\n                        console.log(arguments);\n                    }\n                }), undefined,undefined]`,\n              },\n            ]}\n          >{`\nfunction fn(n1, n2) {\nconsole.log(this);\nconsole.log(n1, n2);\n}\nlet obj = { fn: fn, age: 20 };\n//call()方法：改变fn中的this，并且把fn立即执行\nfn.call(obj, 1, 2); \n//bind()方法：改变fn中的this，fn并不执行\nfn.bind(obj, 1, 2); \n\n//bind和call方法调用形式类似，但是原理完全不同\nfn.call(obj, 11, 22); // =>fn先执行，将fn内的this指向obj，并且把参数10,20传递给fn\n\nfn.bind(obj, 33, 44); // bind是先将fn中的this指向obj，并且将参数10,20预先传递给fn，但是此时的fn并没有被执行，只有fn执行时this指向和传递参数才有作用\nfn.bind(obj, 55, 66); // =>不会有任何输出\nfn.bind(obj, 77, 88)(); // =>调用后才会有输出\n// =>需求：点击box这个盒子的时候，需要执行fn，并且让fn中的this指向obj\noBox.onclick=fn; // =>点击的时候执行了fn,但此时fn中的this是oBox\n\noBox.onclick=fn.call(obj); // =>绑定事件的时候就已经把fn立即执行了(call本身就是立即执行函数),然后把fn执行的返回值绑定给事件\n\noBox.onclick=fn.bind(obj);\n// =>fn.bind(obj)：fn调取Function.prototype上的bind方法，执行这个\n/* \n * function(){\n *     fn.call(obj);\n * }\n */\noBox.onclick=function(){\n   // =>this === oBox\n    fn.call(obj); // 点击执行 \n}\n            `}</SyntaxHighlight>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SyntaxHighlight from \"../../components/SyntaxHighlight\";\nimport { Divider } from \"antd\";\nexport default function ThisBind() {\n  return (\n    <div>\n      <Divider style={{ margin: \"15px 0\" }} />\n      <h2 id=\"ThisBind\">二、This绑定</h2>\n      <Divider style={{ margin: \"15px 0\" }} />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport This from \"./This\";\nimport ThisBind from \"./ThisBind\";\nexport default function JavaScriptBasic() {\n  let [data, setData] = useState({});\n  useEffect(() => {\n    //挂载了\n    return () => {\n      console.log(\"销毁了\");\n      // 相当于 componentWillUnmount\n    };\n  }, []);\n\n  return (\n    <div>\n      <This></This>\n      <ThisBind></ThisBind>\n    </div>\n  );\n}\n"],"names":["copyCode","text","input","document","createElement","body","appendChild","setAttribute","select","execCommand","message","removeChild","SyntaxHighlight","props","useState","lineNumber","setLineNumber","onOff","setOnOff","useTransition","stage","shouldMount","fullscreen","runCode","devtools","content","console","clear","codeMode","forEach","el","fn","log","title","Function","className","styles","style","padding","display","justifyContent","src","icon","alt","placement","OrderedListOutlined","onClick","FullscreenOutlined","CopyrightOutlined","children","PlayCircleOutlined","customStyle","border","language","xonokai","showLineNumbers","lineNumberStyle","color","fontSize","wrapLines","transition","transform","from","enter","leave","opacity","FullscreenExitOutlined","This","id","margin","ThisBind","JavaScriptBasic","useEffect"],"sourceRoot":""}